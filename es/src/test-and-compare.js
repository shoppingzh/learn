const pairs = [
  [undefined, undefined],
  [null, null],
  [true, true],
  [true, false],
  [false, false],
  [1, 1],
  [NaN, NaN],
  [Infinity, NaN],
  [-0, +0],
  [Symbol.iterator, Symbol.iterator],
  [Symbol(), Symbol()],
  ['', ' '],
  ['1', '1'],
  [{ valueOf() { return 1 } }, { valueOf() { return 1 } }],
  [[1], [1]],

  // undefined
  [undefined, null],
  [undefined, true],
  [undefined, false],
  [undefined, 1],
  [undefined, 0],
  [undefined, -0],
  [undefined, +0],
  [undefined, NaN],
  [undefined, Infinity],

  [undefined, Symbol.iterator],
  [undefined, ''],
  [undefined, ' '],
  [undefined, '1'],
  [undefined, 'false'],

  [undefined, {}],
  [undefined, { toString() { return undefined } }],
  [undefined, { valueOf() { return 1 } }],

  // null
  [null, true],
  [null, false],
  [null, 1],
  [null, 0],
  [null, -0],
  [null, +0],
  [null, NaN],
  [null, Infinity],

  [null, Symbol.iterator],
  [null, ''],
  [null, ' '],
  [null, '1'],
  [null, 'false'],

  [null, {}],
  [null, { toString() { return null } }],
  [null, { valueOf() { return 1 } }],

  // boolean
  [true, 1],
  [true, 0],
  [true, 2],
  [true, NaN],
  [false, NaN],
  [true, Infinity],
  [true, -0],
  [true, +0],
  [false, -0],
  [false, +0],
  [true, Symbol.iterator],
  [true, ''],
  [false, ''],
  [true, ' '],
  [false, ' '],
  [true, '0'],
  [true, '1'],
  [false, '0'],
  [false, '1'],
  [true, {}],
  [true, { toString() { return true } }],
  [true, { toString() { return 1 } }],
  [true, []],
  [false, []],
  [true, [1]],
  [false, [1]],
  [true, [0]],
  [false, [0]],
  [true, [0, 1]],
  [false, [0, 1]],

  // number
  [1, '1'],
  [0, '0'],
  [0, '1'],
  [-0, '-0'],
  [+0, '+0'],
  [NaN, 'NaN'],
  [NaN, '1'],
  [Infinity, 'Infinity'],
  [-Infinity, '-Infinity'],
  [0, ''],
  [0, ' '],
  [1, { valueOf() { return 1 } }],
  [1, { valueOf() { return '1' } }],
  [1, { toString() { return 1 } }],
  [1, { toString() { return '1' } }],
  [1, [0]],
  [1, [1]],
  [1, [1, 2]],

  // symbol
  [Symbol.iterator, undefined],
  [Symbol.iterator, null],
  [Symbol.iterator, true],
  [Symbol.iterator, false],
  [Symbol.iterator, 0],
  [Symbol.iterator, -0],
  [Symbol.iterator, +0],
  [Symbol.iterator, NaN],
  [Symbol.iterator, Infinity],
  [Symbol.iterator, -Infinity],
  [Symbol.iterator, ''],
  [Symbol.iterator, ' '],
  [Symbol.iterator, { toString() { return Symbol.iterator } }], // true

  // string
  ['undefined', undefined],
  ['null', null],
  ['', false],
  ['  ', false],
  ['', 0],
  ['', -0],
  ['', +0],
  ['', NaN],
  ['', Infinity],
  ['  ', 0],
  ['  ', -0],
  ['  ', +0],
  ['  ', NaN],
  ['  ', Infinity],
  ['1', 1],
  [' 1 ', 1],
  ['NaN', NaN],
  ['', {}],
  ['', []],
  ['  ', {}],
  ['  ', []], // false [] -> '' / '' != '  '
  ['1', [1]],
  ['1', [1, 2]],
  ['1', { valueOf() { return 1 } }],
  ['1', { toString() { return 1 } }],
  ['1', { valueOf() { return 1 }, toString() { return 2 } }],

  // object
  [{}, {}],
  [{ valueOf() { return 1 } }, { toString() { return 1 } }],
  [{ valueOf() { return '1' } }, [1]],
  [[1], [1]],
  [{ valueOf() { return undefined } }, undefined],
  [{ valueOf() { return null } }, null],
  [{ valueOf() { return 1 } }, '1'],
  [{ toString() { return '1' } }, true],
  [[1], undefined],
  [[0], undefined],
  [[0], null],
  [[0], false],
  [[0], 0],
  [[0], -0],
  [[0], +0],
  [[NaN], NaN],
  [[Infinity], Infinity],
]

it('===', () => {
  const result = [
    true,
    true,
    true,
    false,
    true,
    true,
    false,
    false,
    true,
    true,
    false,
    false,
    true,
    false,
    false,

    // undefined
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,

    false,
    false,
    false,
    false,
    false,

    false,
    false,
    false,

    // null
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,

    false,
    false,
    false,
    false,
    false,

    false,
    false,
    false,

    // boolean
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,

    // number
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,

    // symbol
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,

    // string
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,

    // object
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
  ]
  pairs.forEach((pair, index) => {
    const a = pair[0]
    const b = pair[1]
    expect(a === b).toBe(result[index])
  })
})

it('==', () => {
  const result = [
    true,
    true,
    true,
    false,
    true,
    true,
    false,
    false,
    true,
    true,
    false,
    false,
    true,
    false,
    false,

    // undefined
    true,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,

    false,
    false,
    false,
    false,
    false,

    false,
    false, // 特别注意！
    false,

    // null
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,

    false,
    false,
    false,
    false,
    false,

    false,
    false, // 特别注意！
    false,

    // boolean
    true,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    true,
    true,
    false,
    false,
    true,
    false,
    true,
    false,
    true,
    true,
    false,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    false,
    true,
    false,
    false,

    // number
    true,
    true,
    false,
    true,
    true,
    false,
    false,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    false,
    true,
    false,

    // symbol
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    true,

    // string
    false,
    false,
    true,
    true,
    true,
    true,
    true,
    false,
    false,
    true,
    true,
    true,
    false,
    false,
    true,
    true,
    false,
    false,
    true,
    false,
    false,
    true,
    false,
    true,
    true,
    true,

     // object
    false,
    false,
    false,
    false,
    false, // [{ valueOf() { return undefined } }, undefined],
    false, // [{ valueOf() { return null } }, null],
    true, // [{ valueOf() { return 1 } }, '1'],
    true, // [{ toString() { return '1' } }, true],
    false, // [[1], undefined],
    false, // [[0], undefined],
    false, // [[0], null],
    true, // [[0], false],
    true, // [[0], 0],
    true, // [[0], -0],
    true, // [[0], +0],
    false, // [[NaN], NaN],
    true, // [[Infinity], Infinity],
  ]
  pairs.forEach((pair, index) => {
    console.log(pair)
    const a = pair[0]
    const b = pair[1]
    expect(a == b).toBe(result[index])
  })
})